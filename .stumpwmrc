;; -*- mode: common-lisp; -*-
(require 'swank)
(in-package :stumpwm)

(defvar *autotiling-groups* '()
  "Names of groups that will automatically tile their windows.")

;; Engage!
;;(swank:create-server)

;; Style customizations
(set-focus-color               "#336699")
(set-unfocus-color             "#336699")
(setf *input-window-gravity*   :center)
(setf *maxsize-border-width*   1)
(setf *message-window-gravity* :center)
(setf *normal-border-width*    1)
(setf *transient-border-width* 1)
(setf *window-border-style*    :thick)


;; C-t clashes with Chromium's "new tab" short cut.
(set-prefix-key (kbd "s-t"))

;; mode-line
(setf *mode-line-timeout* 1)
(setf *screen-mode-line-format*
      (list "^B" '(:eval (run-shell-command "date +\"%T | %D\" | tr '\\n' ' '" t))))
(mode-line)

;; TODO: put these into a util package
(defun take (seq n)
  (subseq seq 0 n))

(defun partition (seq n)
  (loop for cell on seq by
       #'(lambda (list)
           (nthcdr n list))
     collecting (subseq cell 0 n)))

;; Create groups[1..9]
(dotimes (i 10)
  (progn
    (gnew (format nil "~d" i))
    (define-key *top-map*
        (kbd (format nil "M-~d" i))
      (format nil "gselect ~s" i))
    (push (format nil "~d" i) *autotiling-groups*)))

(push "Default" *autotiling-groups*)

(defmacro spawn-with (key-combo command)
  `(define-key *top-map* (kbd ,key-combo) ,command))

(defun spawn-with* (pair)
  `(spawn-with ,(first pair) ,(second pair)))

(defmacro spawn-many (&rest pairs)
  (let ((pairs (partition pairs 2)))
    `(progn
       ,@(mapcar #'spawn-with* pairs))))

(spawn-many
 "M-TAB" "sother"
 "M-E" "exec emacsclient -c"
 "M-F" "exec chromium --force-device-scale-factor=2"
 "S-M-RET" "exec roxterm"
 "M-I" "exec roxterm -e 'ssh xeno@zerolength.com -t tmux attach-session -d -t weechat'"
 "M-j" "fnext"
 "M-J" "move-window right"
 "M-H" "move-window left"
 "M-M" "exec roxterm -e 'ncmpcpp'"
 "C-p" "dmenu_run -fn 'Monaco-25'"
 "s-s" "hsplit"
 "s-S" "vsplit"
 "s-r" "remove"
 "s-R" "resize"
 "M-C" "delete"
 "M-Q" "quit"
 "M-V" "exec vlc"
 "M-K" "exec keepassx"
 "s-Right" "gnext"
 "s-Left" "gprev")

(defun do-auto-tile (group)
  (let* ((tlen (length (stumpwm::group-windows group)))
         (len (1- tlen)))
    (unless (zerop tlen)
      (stumpwm::call-interactively "only")
      (unless (current-window)
        (stumpwm::focus-next-window group)))
    (unless (zerop len)
      (stumpwm::split-frame group :column)
      (stumpwm::focus-next-frame group)
      (dotimes (n (1- len))
        (stumpwm::split-frame group :row (/ (- len n)))
        (stumpwm::focus-next-frame group))
      (stumpwm::focus-next-frame group))))

(defcommand auto-tile () ()
  "Tile windows in the current group."
  (do-auto-tile (current-group)))

(defun autotile-hook (&optional window)
  (unless (and window
               (stumpwm::window-transient-p window))
    (when (member (stumpwm::group-name (current-group))
                  *autotiling-groups*
                  :test #'equalp)
      (do-auto-tile (current-group)))))

(add-hook *new-window-hook* #'autotile-hook)
(add-hook *destroy-window-hook* #'autotile-hook)
