;; -*- mode: common-lisp; -*-
(require 'swank)
(in-package :stumpwm)


;; Engage!
(swank:create-server)

;; Style customizations
(set-focus-color               "#336699")
(set-unfocus-color             "#336699")
(setf *input-window-gravity*   :center)
(setf *maxsize-border-width*   3)
(setf *message-window-gravity* :center)
(setf *normal-border-width*    3)
(setf *transient-border-width* 3)
(setf *window-border-style*    :thick)

;; C-t clashes with Chromiums "new tab" short cut.
(set-prefix-key (kbd "s-t"))

;; mode-line
(setf *mode-line-timeout* 1)
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date +\"%T | %D\" | tr '\\n' ' '" t))))

;; TODO: put these into a util package
(defun take (seq n)
  (subseq seq 0 n))

(defun partition (seq n)
  (loop for cell on seq by
       #'(lambda (list)
           (nthcdr n list))
     collecting (subseq cell 0 n)))

;; Create groups[1..9]
(dotimes (i 10)
  (progn
    (gnew (format nil "~d" i))
    (define-key *top-map*
        (kbd (format nil "M-~d" i))
      (format nil "gselect ~s" i))))

(defcommand set-volume (n) ((:string "Amount:"))
  "Changes the volume"
  (let ((command-str (format nil "amixer -c 0 --quiet set Master ~a" n)))
    (run-shell-command command-str)))

(defcommand ncmpcpp (what) ((:string "Command:"))
  "Sends a command to ncmpcpp"
  (run-shell-command (format nil "ncmpcpp ~a" what)))

(defun shift-windows-forward (frames win)
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
                             (frame-window frame))
      (when win
        (pull-window win frame)))))

(defcommand my-rotate-windows () ()
  "rotate a pair of windows"
  (let* ((frames (group-frames (current-group)))
           (win (frame-window (car (last frames)))))
          (shift-windows-forward frames win)))

(defmacro spawn-with (key-combo command)
  `(define-key *top-map* (kbd ,key-combo) ,command))

(defun spawn-with* (pair)
  `(spawn-with ,(first pair) ,(second pair)))

(defmacro spawn-many (&rest pairs)
  (let ((pairs (partition pairs 2)))
    `(progn
       ,@(mapcar #'spawn-with* pairs))))

(spawn-many
 "M-E" "exec emacsclient -c"
 "M-F" "exec chromium"
 "S-M-RET" "exec termite"
 "M-I" "exec termite -e 'ssh xeno@zerolength.com -t tmux attach-session -d -t weechat'"
 "M-j" "fnext"
 "M-J" "move-window right"
 "M-H" "move-window left"
 "M-M" "exec termite -e 'ncmpcpp'"
 "s-s" "hsplit"
 "s-S" "vsplit"
 "s-r" "remove"
 "s-R" "resize"
 "M-C" "delete"
 "M-Q" "quit"
 "M-S" "exec skype"
 "M-Y" "exec pidgin"
 "M-V" "exec vlc"
 "M-K" "exec keepassx"
 "M-W" "exec termite -e 'wicd-curses'"
 "s-m" "exec termite -e 'mutt'"
 "M-F5" "ncmpcpp pause"
 "M-F6" "exec amixer -c 0 --quiet set Master mute"
 "M-F7" "exec amixer set Master unmute"
 "M-F8" "ncmpcpp play"
 "M-F11" "set-volume 1-"
 "M-F12" "set-volume 1+"
 "C-p" "exec dmenu_run"
 "s-Right" "gnext"
 "s-Left" "gprev"
 "XF86MonBrightnessUp"   "exec xbacklight -inc 40"
 "XF86MonBrightnessDown" "exec xbacklight -dec 40")
